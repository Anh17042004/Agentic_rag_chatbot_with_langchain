# nh·∫≠p c√°c th∆∞ vi·ªán c∆° b·∫£n
import streamlit as st
from langchain_core.messages import HumanMessage, AIMessage
import time

# nh·∫≠p c√°c module t√πy ch·ªânh
from document_loader import DocumentLoader
from embedding_manager import EmbeddingManager
from agent_manager import AgentManager
from config import DEFAULT_CHUNK_SIZE, DEFAULT_CHUNK_OVERLAP

# Thi·∫øt l·∫≠p trang Streamlit
st.set_page_config(page_title="Agentic RAG Chatbot", page_icon="ü¶ú", layout="wide")
st.title("ü¶ú Agentic RAG Chatbot")

# Kh·ªüi t·∫°o c√°c ƒë·ªëi t∆∞·ª£ng qu·∫£n l√Ω
@st.cache_resource
def get_managers():
    """
    Kh·ªüi t·∫°o v√† l∆∞u cache c√°c ƒë·ªëi t∆∞·ª£ng qu·∫£n l√Ω.
    
    Returns:
        Tuple g·ªìm EmbeddingManager v√† AgentManager
    """
    embedding_manager = EmbeddingManager()
    agent_manager = AgentManager(embedding_manager)
    return embedding_manager, agent_manager

# L·∫•y c√°c ƒë·ªëi t∆∞·ª£ng qu·∫£n l√Ω
embedding_manager, agent_manager = get_managers()


# T·∫°o sidebar cho vi·ªác t·∫£i l√™n t√†i li·ªáu
with st.sidebar:
    st.header("Qu·∫£n l√Ω t√†i li·ªáu")
    
    # T·∫°o tab cho c√°c ch·ª©c nƒÉng qu·∫£n l√Ω t√†i li·ªáu
    upload_tab, manage_tab = st.tabs(["T·∫£i l√™n", "Qu·∫£n l√Ω"])
    
    with upload_tab:
        st.subheader("T·∫£i l√™n t√†i li·ªáu m·ªõi")
        
        # Th√™m h∆∞·ªõng d·∫´n
        st.markdown("""
        H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng file:
        - PDF (.pdf)
        - VƒÉn b·∫£n (.txt)
        - Excel (.xlsx, .xls)
        - Word (.docx, .doc)
        - PowerPoint (.pptx, .ppt)
        - CSV (.csv)
        - HTML (.html)
        - Markdown (.md)
        """)
        
        # T·∫°o widget t·∫£i l√™n nhi·ªÅu file
        uploaded_files = st.file_uploader(
            "Ch·ªçn file t√†i li·ªáu",
            accept_multiple_files=True,
            type=["pdf", "txt", "csv", "docx", "doc", "pptx", "ppt", "html", "md", "xlsx", "xls"],
            help="T·∫£i l√™n m·ªôt ho·∫∑c nhi·ªÅu file t√†i li·ªáu ƒë·ªÉ x·ª≠ l√Ω"
        )
        
        # T·∫°o c√°c t√πy ch·ªçn n√¢ng cao
        with st.expander("T√πy ch·ªçn n√¢ng cao"):
            chunk_size = st.slider(
                "K√≠ch th∆∞·ªõc ƒëo·∫°n vƒÉn b·∫£n (chunk size)",
                min_value=100,
                max_value=2000,
                value=DEFAULT_CHUNK_SIZE,
                step=100,
                help="K√≠ch th∆∞·ªõc c·ªßa m·ªói ƒëo·∫°n vƒÉn b·∫£n sau khi chia nh·ªè"
            )
            
            chunk_overlap = st.slider(
                "ƒê·ªô ch·ªìng l·∫≠p gi·ªØa c√°c ƒëo·∫°n (chunk overlap)",
                min_value=0,
                max_value=500,
                value=DEFAULT_CHUNK_OVERLAP,
                step=50,
                help="S·ªë k√Ω t·ª± ch·ªìng l·∫≠p gi·ªØa c√°c ƒëo·∫°n li√™n ti·∫øp"
            )
        
        # T√πy ch·ªçn x√≥a d·ªØ li·ªáu c≈©
        if uploaded_files:
            with st.expander("T√πy ch·ªçn x·ª≠ l√Ω", expanded=True):
                clear_existing = st.checkbox(
                    "X√≥a t·∫•t c·∫£ d·ªØ li·ªáu c≈© tr∆∞·ªõc khi th√™m d·ªØ li·ªáu m·ªõi",
                    value=False,
                    help="N·∫øu ƒë∆∞·ª£c ch·ªçn, t·∫•t c·∫£ d·ªØ li·ªáu c≈© s·∫Ω b·ªã x√≥a tr∆∞·ªõc khi th√™m d·ªØ li·ªáu m·ªõi"
                )
                
                # N√∫t x·ª≠ l√Ω t√†i li·ªáu
                if st.button("X·ª≠ l√Ω t√†i li·ªáu", type="primary"):
                    with st.spinner("ƒêang x·ª≠ l√Ω t√†i li·ªáu..."):
                        try:
                            # T·∫£i v√† ph√¢n ƒëo·∫°n t√†i li·ªáu
                            documents_dict = DocumentLoader.load_and_split_documents(
                                uploaded_files,
                                chunk_size=chunk_size,
                                chunk_overlap=chunk_overlap
                            )
                            
                            # Th√™m t√†i li·ªáu v√†o vector store
                            results = embedding_manager.add_documents(
                                documents_dict,
                                clear_existing=clear_existing
                            )
                            
                            # L·∫•y t·ªïng s·ªë chunks
                            total_chunks = results.pop("total_chunks", 0)
                            
                            # Hi·ªÉn th·ªã k·∫øt qu·∫£
                            st.success(f"ƒê√£ x·ª≠ l√Ω {len(uploaded_files)} file th√†nh c√¥ng!")
                            
                            # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
                            st.write(f"**T·ªïng s·ªë ƒëo·∫°n vƒÉn b·∫£n ƒë√£ t·∫°o:** {total_chunks}")
                            
                            # Hi·ªÉn th·ªã th√¥ng tin t·ª´ng file
                            st.write("**Chi ti·∫øt t·ª´ng file:**")
                            for file_name, num_chunks in results.items():
                                st.write(f"- {file_name}: {num_chunks} ƒëo·∫°n vƒÉn b·∫£n")
                            
                            # Th√™m th√¥ng b√°o th√†nh c√¥ng
                            st.session_state.upload_success = True
                            
                        except Exception as e:
                            st.error(f"L·ªói khi x·ª≠ l√Ω t√†i li·ªáu: {str(e)}")
    
    with manage_tab:
        st.subheader("Qu·∫£n l√Ω t√†i li·ªáu v√† tr√≤ chuy·ªán")
        
        # T·∫°o 2 c·ªôt ƒë·ªÉ ph√¢n chia giao di·ªán
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**X√≥a t·∫•t c·∫£ t√†i li·ªáu**")
            
            # Kh·ªüi t·∫°o session state cho checkbox x√≥a t√†i li·ªáu
            if "confirm_delete_docs" not in st.session_state:
                st.session_state.confirm_delete_docs = False
            
            # Checkbox x√°c nh·∫≠n x√≥a t√†i li·ªáu
            st.session_state.confirm_delete_docs = st.checkbox(
                "X√°c nh·∫≠n x√≥a t·∫•t c·∫£ t√†i li·ªáu",
                value=st.session_state.confirm_delete_docs,
                key="delete_docs_checkbox"
            )
            
            # N√∫t x√≥a t·∫•t c·∫£ t√†i li·ªáu
            if st.button(
                "X√≥a t√†i li·ªáu",
                type="primary",
                disabled=not st.session_state.confirm_delete_docs,
                use_container_width=True
            ):
                with st.spinner("ƒêang x√≥a t·∫•t c·∫£ t√†i li·ªáu..."):
                    try:
                        embedding_manager.clear_vector_store()
                        st.success("ƒê√£ x√≥a th√†nh c√¥ng t·∫•t c·∫£ t√†i li·ªáu!")
                        st.info("H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi. B·∫°n c√≥ th·ªÉ t·∫£i l√™n t√†i li·ªáu m·ªõi.")
                        st.session_state.confirm_delete_docs = False
                    except Exception as e:
                        st.error(f"L·ªói khi x√≥a t√†i li·ªáu: {str(e)}")
        
        with col2:
            st.write("**X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán**")
            
            # Kh·ªüi t·∫°o session state cho checkbox x√≥a l·ªãch s·ª≠
            if "confirm_delete_history" not in st.session_state:
                st.session_state.confirm_delete_history = False
            
            # Checkbox x√°c nh·∫≠n x√≥a l·ªãch s·ª≠
            st.session_state.confirm_delete_history = st.checkbox(
                "X√°c nh·∫≠n x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán",
                value=st.session_state.confirm_delete_history,
                key="delete_history_checkbox"
            )
            
            # N√∫t x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán
            if st.button(
                "X√≥a l·ªãch s·ª≠",
                type="primary",
                disabled=not st.session_state.confirm_delete_history,
                use_container_width=True
            ):
                with st.spinner("ƒêang x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán..."):
                    try:
                        # X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán
                        st.session_state.messages = []
                        st.success("ƒê√£ x√≥a th√†nh c√¥ng l·ªãch s·ª≠ tr√≤ chuy·ªán!")
                        st.session_state.confirm_delete_history = False
                    except Exception as e:
                        st.error(f"L·ªói khi x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán: {str(e)}")

# Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu v·ª´a t·∫£i l√™n t√†i li·ªáu th√†nh c√¥ng
if st.session_state.get("upload_success", False):
    st.success("T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n v√† x·ª≠ l√Ω th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu ƒë·∫∑t c√¢u h·ªèi.")
    # X√≥a tr·∫°ng th√°i th√†nh c√¥ng ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã l·∫°i khi t·∫£i l·∫°i trang
    st.session_state.upload_success = False

# kh·ªüi t·∫°o l·ªãch s·ª≠ tr√≤ chuy·ªán
if "messages" not in st.session_state:
    st.session_state.messages = []

# hi·ªÉn th·ªã tin nh·∫Øn tr√≤ chuy·ªán t·ª´ l·ªãch s·ª≠ khi ch·∫°y l·∫°i ·ª©ng d·ª•ng
for message in st.session_state.messages:
    if isinstance(message, HumanMessage):
        with st.chat_message("user"):
            st.markdown(message.content)
    elif isinstance(message, AIMessage):
        with st.chat_message("assistant"):
            st.markdown(message.content)


# t·∫°o thanh nh·∫≠p li·ªáu ƒë·ªÉ nh·∫≠p tin nh·∫Øn
user_question = st.chat_input("H·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ t√†i li·ªáu c·ªßa b·∫°n...")


# ng∆∞·ªùi d√πng ƒë√£ g·ª≠i prompt ch∆∞a?
if user_question:
    # th√™m tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng (prompt) v√†o m√†n h√¨nh v·ªõi streamlit
    with st.chat_message("user"):
        st.markdown(user_question)
        st.session_state.messages.append(HumanMessage(user_question))

    # g·ªçi agent
    with st.spinner("ƒêang t√¨m ki·∫øm th√¥ng tin..."):
        result = agent_manager.invoke(user_question, chat_history=st.session_state.messages)
        ai_message = result["output"]

    # th√™m ph·∫£n h·ªìi t·ª´ llm v√†o m√†n h√¨nh (v√† tr√≤ chuy·ªán)
    with st.chat_message("assistant"):
        st.markdown(ai_message)
        st.session_state.messages.append(AIMessage(ai_message))



